# coding: utf-8

from . import trans
from . import match
from . import special

CONFIG_FILES = {
    'hero': 'hero',
    'hero_book': 'hero_book',
    'destinys': 'hero_destiny',
    'heros': 'hero_detail',
    'user': 'user_info',
    'monster': 'monster',
    'skill_data': 'skill_data',
    'map_info': 'map_info',
    'player': 'player_initial',
    'map_fight': 'map_fight',
    'monster_drop': 'monster_drop',
    'world_map': 'map_stage',
    'chapter_map': 'map_stage',
    'stage_map': 'map_stage',
    'stages': 'map_stage',
    'chapter_stage': 'map_stage',
    'hero_evolution': 'hero_evolution',
    'hero_resolve': 'hero_resolve',
    'battle_enmity': 'chouhenliebiao',
    'hero_evolution': 'hero_evolution',
    'hero_resolve': 'hero_resolve',
    'text': 'text',
    'equips': 'equip',
    'equip': 'equip_st',
    'equip_resolve': 'equip_resolve',
    'equip_quality': 'equip_quality',
    'equip_material': 'equip_material',
    'material': 'equip_material',
    'skill_buff': 'skill_buff',
    'class_sort': 'class_sort',
    'class_evolution': 'class_evolution',
    'item': 'item',
    'equip_merge': 'equip',
    'arena_award': 'arena_award',
    'goblin': 'goblins',
    'goblins': 'goblin_detail',
    'goblin_get': 'goblin_get',
    'goblin_master': 'goblin_master',
    'goblin_position': 'goblin_positon',
    'expense': 'money_ascending',
    'pet': 'pet_info',
    'pets': 'pet',
    'pet_skill': 'pet_skill',
    'pet_skill_star': 'pet_skill',
    'pet_item': 'pet_item',
}

FILE_CONFIGS = special.file_configs(CONFIG_FILES)

CONFIG_MAPPING = {
    'arena_start_time': None,
    'hero': {
        'pk': (match.equalwith('warrior_level'), int),
        'detail': (match.rematch(r'(?:(?:need|eaten)_exp_type)|sell_money\d'),
                   trans.kind_dict(3, (
                        (1, (('need', int), ('eaten', int), ('sell', int))),
                        (2, (('need', int), ('eaten', int), ('sell', int))),
                        (3, (('need', int), ('eaten', int), ('sell', int))),
                        (4, (('need', int), ('eaten', int), ('sell', int))),
                        (5, (('need', int), ('eaten', int), ('sell', int))),
                        (6, (('need', int), ('eaten', int), ('sell', int))),
                        (7, (('need', int), ('eaten', int), ('sell', int))),
                        )))
    },
    'hero_book': trans.hashmap_value(int, int),
    'heros': {
        'pk': (match.equalwith('hero_id'), int),
        'name': (match.equalwith('name'), trans.ascii_str('gb18030')),
        'story': (match.equalwith('story'), trans.ascii_str('gb18030')),
        'image': (match.equalwith('image'), str),
        'icon': (match.equalwith('image'), trans.icon(ext='_i')),
        'res': (match.equalwith('res'), str),
        'max_level': (match.equalwith('max_level'), int),
        'party': (match.equalwith('party'), int),
        'star': (match.equalwith('star'), int),
        'cost': (match.equalwith('cost'), int),
        'can_eaten': (match.equalwith('is_eaten'), trans.iftrueto(int, 0)),
        'can_sell': (match.equalwith('is_sell'), trans.iftrueto(int, 0)),
        'init': (match.endswith('_initial'),
                 trans.group2dict((
                        ('natk', int),
                        ('ndef', int),
                        ('matk', int),
                        ('mdef', int),
                        ('hp', int),
                        ))),
        'incr': (match.endswith('_increase'),
                 trans.group2dict((
                        ('natk', int),
                        ('matk', int),
                        ('ndef', int),
                        ('mdef', int),
                        ('hp', int),
                        ))),
        'skill': (match.multiin(('skill_normal', 'skill_rage')),
                  trans.group2dict((
                        ('normal', trans.iftrueto(int)),
                        ('rage', trans.iftrueto(int)),
                        ))),
        'ai': (match.equalwith('AI'), int),
        'type': (match.equalwith('type'), int),
        'book_id': (match.equalwith('book_id'), int),
        'job': (match.equalwith('job'), int),
        'destiny': (match.rematch(r'destiny\d'),
                    trans.mapping_list(trans.iftrueto(int))),
        'destiny_type': (match.equalwith('destiny'), str),
        'speed': (match.equalwith('move_speed'),
                  trans.delimiter_str(',', int, tuple)),
        'size': (match.equalwith('size'),
                 trans.delimiter_str(',', trans.halve(int), tuple)),
        'atk_cd': (match.equalwith('skill_cd'),
                   trans.delimiter_str(',', int, tuple)),
        'release_anger': (match.equalwith('rage'), int),
        'hit': (match.equalwith('hit'), int),
        'dodge': (match.equalwith('dodge'), int),
        'storm_hit': (match.equalwith('crt'), int),
        'holdout_storm': (match.equalwith('crt_nerf'), int),
    },
    'user': {
        'pk': (match.equalwith('level'), int),
        'exp': (match.equalwith('exp'), int),
        'energy': (match.equalwith('energy'), int),
        'cost_top': (match.equalwith('cost_top'), int),
        'friend_top': (match.equalwith('friend_num'), int),
        'energy_resume': (match.equalwith('energy_resume'), int),
    },
    'player': {
        'pk': (match.equalwith('raceID'), int),
        'name': (match.equalwith('name'), trans.ascii_str('gb18030')),
        'story': (match.equalwith('story'), trans.ascii_str('gb18030')),
        'image': (match.equalwith('image'), str),
        'res': (match.equalwith('res'), str),
        'level': (match.equalwith('level'), int),
        'gold': (match.equalwith('gold'), int),
        'kcoin': (match.equalwith('Kcoin'), int),
        'heros': (match.equalwith('card_bag_intial'), eval),
        'team': (match.startswith(r'position'),
                 trans.mapping_list(int)),
    },
    'monster': {
        'pk': (match.equalwith('ID'), int),
        'name': (match.equalwith('name'), trans.ascii_str('gb18030')),
        'image': (match.equalwith('image'), str),
        'icon': (match.equalwith('image'), trans.icon(ext='_i')),
        'res': (match.equalwith('res'), str),
        'level': (match.equalwith('level'), int),
        'job': (match.equalwith('job'), int),
        'hp': (match.equalwith('hp'), int),
        'natk': (match.equalwith('ad'), int),
        'matk': (match.equalwith('ap'), int),
        'ndef': (match.equalwith('dd'), int),
        'mdef': (match.equalwith('dp'), int),
        'skill': (match.multiin(('skill_normal', 'skill_passive', 'skill_rage')),
                  trans.group2dict((
                        ('normal', trans.iftrueto(int)),
                        ('rage', trans.iftrueto(int)),
                        ('passive', trans.iftrueto(int)),
                        ))),
        'crt_odds': (match.equalwith('crt_odds'), int),
        'crt_damage': (match.equalwith('crt_damage'), int),
        'final_damage': (match.equalwith('final_damage'), int),
        'final_nerf': (match.equalwith('final_nerf'), int),
        'ai': (match.equalwith('AI'), int),
        'drop': (match.equalwith('drop'), int),
        'speed': (match.equalwith('move_speed'),
                  trans.delimiter_str(',', int, tuple)),
        'size': (match.equalwith('size'),
                 trans.delimiter_str(',', trans.halve(int), tuple)),
        'atk_cd': (match.equalwith('skill_cd'),
                   trans.delimiter_str(',', int, tuple)),
        'release_anger': (match.equalwith('rage'), int),
        'hit': (match.equalwith('hit'), int),
        'dodge': (match.equalwith('dodge'), int),
        'storm_hit': (match.equalwith('crt'), int),
        'holdout_storm': (match.equalwith('crt_nerf'), int),
    },
    'skill_data': {
        'pk' : (match.equalwith('skill_id'), int),
        'name': (match.equalwith('name'),
                 trans.ascii_str('gb18030')),
        'icon': (match.equalwith('icon'), str),
        'effect': (match.equalwith('effect_lua'), trans.iftrueto(str, 'null')),
        'effective': (match.equalwith('funtion_py'), str),
        'desc': (match.equalwith('describe'),
                 trans.ascii_str('gb18030')),
        'cd': (match.equalwith('cd'),
               trans.delimiter_str(',', int, tuple)),
    },
    'map_info': special.mapinfo({
        'pk' : (match.equalwith('map_ID'), int),
        'name': (match.equalwith('resource_name'),
                 trans.ascii_str('gb18030')),
        'pixel': (match.equalwith('title'), int),
        'size': (match.equalwith('map_area'),
                 trans.delimiter_dict(',', [('x', int), ('y', int)])),
        'useless': (match.equalwith('sky_area'), int),
        'focus': (match.multiin(('default_camera_A', 'default_camera_B')),
                 trans.group2dict((
                     ('attack',
                      trans.delimiter_dict(',', [('x', int), ('y', int)])),
                     ('defend',
                      trans.delimiter_dict(',', [('x', int), ('y', int)])),
                     ))),
        'positions': (match.startswith('position'),
                 trans.delimiter_list(trans.delimiter_dict(',', [('x', int), ('y', int)]))),
        'epositions': (match.startswith('eposition'),
                 trans.delimiter_list(trans.delimiter_dict(',', [('x', int), ('y', int)]))),
    }),
    'destinys': {
        'pk' : (match.equalwith('ID'), int),
        'name': (match.equalwith('name'), trans.ascii_str('gb18030')),
        'story': (match.equalwith('story'), trans.ascii_str('gb18030')),
        'icon': (match.equalwith('icon'), str),
        'sort': (match.equalwith('sort'), int),
        'target': (match.startswith('target'),
                   trans.filtertrue_list(str)),
        'effect_sort': (match.equalwith('effect_sort'), int),
        'value1': (match.equalwith('value1'), int),
        'value2': (match.equalwith('value2'), int),
    },
    'map_fight': {
        'pk' : (match.equalwith('fight_id'), str),
        'map_id': (match.equalwith('map_ID'), int),
        'monster': (match.startswith('enemy'),
                    trans.mapping_list(trans.iftrueto(int))),
        'time': (match.startswith('time'),
                    trans.mapping_list(trans.iftrueto(int))),
        'script': (match.equalwith('script'), str),
    },
    'world_map': special.world_map({
        'pk' : (match.equalwith('stage'), int),
        'area': (match.equalwith('map'), int),
    }),
    'chapter_map': special.chapter_map({
        'pk' : (match.equalwith('stage'), int),
        'area': (match.equalwith('map'), int),
        'chapter': (match.equalwith('chapter'), int),
        'chapter_name': (match.equalwith('chapter_name'),
                         trans.ascii_str('gb18030')),
    }),
    'stage_map': special.stage_map({
        'pk' : (match.equalwith('stage'), int),
        'area': (match.equalwith('map'), int),
        'chapter': (match.equalwith('chapter'), int),
        'res': (match.equalwith('stage_res'), str),
        'name': (match.equalwith('stage_name'),
                 trans.ascii_str('gb18030')),
        'difficult': (match.equalwith('boss_level'), int),
        'script': (match.equalwith('script'), str),
    }),
    'stages': {
        'pk' : (match.equalwith('stage'), int),
        'area': (match.equalwith('map'), int),
        'chapter': (match.equalwith('chapter'), int),
        'res': (match.equalwith('stage_res'), str),
        'name': (match.equalwith('stage_name'),
                 trans.ascii_str('gb18030')),
        'is_getku': (match.equalwith('is_getku'), trans.iftrueto(int)),
        'limit': (match.equalwith('level'),
                 trans.group2dict((
                                   ('level', trans.iftrueto(int, 0)),
                                 ))
                 ),
        'cost': (match.equalwith('energy'),
                 trans.group2dict((
                                   ('energy', trans.iftrueto(int, 0)),
                                 ))
                ),
        'loot': (match.multiin(('stage_exp', 'stage_gold')),
                 trans.group2dict((
                                   ('exp', trans.iftrueto(int, 0)),
                                   ('gold', trans.iftrueto(int, 0)),
                                 ))
                ),
        'light': (match.startswith('selectA'),
                  trans.group2dict((
                        ('fight_id', str),
                        ('story', trans.ascii_str('gb18030')),
                        ('side', trans.iftrueto(int, 0)),
                        ))),
        'dark': (match.startswith('selectB'),
                  trans.group2dict((
                        ('fight_id', str),
                        ('story', trans.ascii_str('gb18030')),
                        ('side', trans.iftrueto(int, 0)),
                        ))),
        'difficult': (match.equalwith('boss_level'), int),
        'script': (match.equalwith('script'), str),
    },
    'chapter_stage': special.chapter_stage({
        'pk' : (match.equalwith('stage'), int),
        'area': (match.equalwith('map'), int),
        'chapter': (match.equalwith('chapter'), int),
        'res': (match.equalwith('stage_res'), str),
        'name': (match.equalwith('stage_name'),
                 trans.ascii_str('gb18030')),
    }),
    'hero_evolution': {
        'pk': (match.equalwith('hero_ID'), int),
        'src': (match.startswith('material_hero'),
                trans.filtertrue_list(int)),
        'dest': (match.equalwith('object_hero'), int),
        'cost': (match.equalwith('money_cost'),
                 trans.group2dict(
                     (
                       ('gold', int),
                     )
                 )
                )
    },
    'hero_resolve': {
        'pk': (match.equalwith('star'), int),
        'gain': (match.equalwith('point'),
                 trans.group2dict(
                     (
                       ('hero', int),
                     )
                 )
                ),
        'cost': (match.equalwith('money_cost'),
                 trans.group2dict(
                     (
                       ('gold', int),
                     )
                 )
                )
    },
    'battle_enmity': special.battle_emenity({
        'pk': (match.equalwith('def'), int),
        'emenity': (match.rematch('hero_\d+'), trans.mapping_list(float)),
        'normal': (match.equalwith('hero_team'), trans.iftrueto(float, 0)),
        'cure': (match.equalwith('hero_jx'), trans.iftrueto(float, 0)),
        'anger': (match.equalwith('hero_nuqi'), trans.iftrueto(float, 0)),
    }),
    'monster_drop': special.monster_drop({
        'pk': (match.equalwith('ID'), int),
        'none': (match.equalwith('none'), trans.none_good),
        'gold': (match.startswith('money'),
                 trans.single_good(trans.iftrueto(int),
                                   trans.iftrueto(int))),
        'hero': (match.startswith('card'),
                 trans.single_good(trans.iftrueto(int),
                                   trans.iftrueto(int),
                                   trans.iftrueto(int))),
        'equip': (match.startswith('equip'),
                  trans.single_good(trans.iftrueto(int),
                                    trans.iftrueto(int))),
    }),
    'text': {
        'pk': (match.equalwith('ID'), int),
        'text': (match.equalwith('text'), trans.ascii_str('gb18030')),
        'level': (match.equalwith('level'), trans.iftrueto(int, 0)),
    },
    'equips': {
        'pk': (match.equalwith('equip_id'), int),
        'name': (match.equalwith('name'), trans.ascii_str('gb18030')),
        'sort': (match.equalwith('sort'), int),
        'star': (match.equalwith('quality'), int),
        'image': (match.equalwith('image'), str),
        'icon': (match.equalwith('image'), str),
        'can_resolve': (match.equalwith('is_resolve'), int),
        'destiny_type': (match.equalwith('destiny'), str),
        'data': (match.rematch(r'ability\d|value\d|level_add\d'),
                trans.kind_dict(3, (
                        (1, (('ability', trans.iftrueto(int, 0)),
                             ('value', trans.iftrueto(int, 0)),
                             ('level_add', trans.iftrueto(int, 0)))),
                        (2, (('ability', trans.iftrueto(int, 0)),
                             ('value', trans.iftrueto(int, 0)),
                             ('level_add', trans.iftrueto(int, 0)))),
                        (3, (('ability', trans.iftrueto(int, 0)),
                             ('value', trans.iftrueto(int, 0)),
                             ('level_add', trans.iftrueto(int, 0)))),
                        )))
    },
    'skill_buff': special.skill_buff({
        'pk': (match.equalwith('buff_id'), int),
        'durations': (match.equalwith('durations'), trans.second2frame),
        'affected': (match.equalwith('is_remove'), trans.value2bool),
        'effect1': (match.equalwith('effect_sort1'), int),
        'value1': (match.equalwith('value1'), trans.iftrueto(int)),
        'cycle1': (match.equalwith('time1'), trans.iftrueto(int, 0)),
        'percent1': (match.equalwith('percent1'),
                     trans.iftrueto(trans.percent(1), 1)),
        'ability_add1': (match.equalwith('ability_add1'),
                         trans.iftrueto(int, 0)),
        'effect2': (match.equalwith('effect_sort2'), trans.iftrueto(int)),
        'value2': (match.equalwith('value2'), trans.iftrueto(int)),
        'cycle2': (match.equalwith('time2'), trans.iftrueto(int, 0)),
        'percent2': (match.equalwith('percent2'),
                     trans.iftrueto(trans.percent(1), 1)),
        'ability_add2': (match.equalwith('ability_add2'),
                         trans.iftrueto(int, 0)),
    }),
    'equip': {
        'pk': (match.equalwith('level'), int),
        'detail': (match.rematch(r'quality\d|sell\d'),
                   trans.kind_dict(2, (
                        (1, (('need', int), ('sell', int))),
                        (2, (('need', int), ('sell', int))),
                        (3, (('need', int), ('sell', int))),
                        (4, (('need', int), ('sell', int))),
                        (5, (('need', int), ('sell', int))),
                        (6, (('need', int), ('sell', int))),
                        (7, (('need', int), ('sell', int))),
                    ))),
    },
    'equip_material': {
        'pk': (match.equalwith('ID'), int),
        'name': (match.equalwith('name'), trans.ascii_str('gb18030')),
        'icon': (match.equalwith('icon'), str),
        'sort': (match.equalwith('sort'), int),
        'star': (match.equalwith('quality'), int),
        'sell': (match.equalwith('sell_money'), int),
    },
    'material': special.material({
        'pk': (match.equalwith('ID'), int),
        'sort': (match.equalwith('sort'), int),
        'star': (match.equalwith('quality'), int),
    }),
    'equip_quality': {
        'pk': (match.equalwith('equip_new'), int),
        'dest': (match.equalwith('equip_new'), int),
        'src': (match.startswith('equip_material_'),
                trans.filtertrue_list(int)),
        'cost': (match.equalwith('money'),
                 trans.group2dict(
                     (
                       ('gold', int),
                     )
                 )
                )
    },
    'equip_resolve': special.equip_resolve({
        'pk': (match.equalwith('quality'), int),
        'sort': (match.equalwith('sort'), int),
        'data': (match.rematch(r'material\d|none\d'),
                 trans.kind_dict(2, (
                        (1, (('material', eval), ('none', int))),
                        (2, (('material', eval), ('none', int))),
                        (3, (('material', eval), ('none', int))),
                        (4, (('material', eval), ('none', int))),
                        (5, (('material', eval), ('none', int))),
                    ))),
    }),
    'class_sort': {
        'pk': (match.equalwith('job_id'), int),
        'name': (match.equalwith('name'), trans.ascii_str('gb18030')),
        'image': (match.equalwith('image'), str),
        'hp': (match.equalwith('hp'), float),
        'natk': (match.equalwith('ad'), float),
        'matk': (match.equalwith('ap'), float),
        'ndef': (match.equalwith('dd'), float),
        'mdef': (match.equalwith('dp'), float),
        'hit': (match.equalwith('hit'), int),
        'dodge': (match.equalwith('dodge'), int),
        'storm_hit': (match.equalwith('crt'), int),
        'holdout_storm': (match.equalwith('crt_nerf'), int),
        'crt_odds': (match.equalwith('crt_odds'), int),
        'crt_damage': (match.equalwith('crt_damage'), int),
        'final_damage': (match.equalwith('final_damage'), int),
        'final_nerf': (match.equalwith('final_nerf'), int),
    },
    'class_evolution': {
        'pk': (match.equalwith('job_ID'), int),
        'dest': (match.equalwith('object_job'), int),
        'src': (match.startswith('material_item'),
                trans.filtertrue_list(int)),
        'cost': (match.equalwith('money_cost'),
                 trans.group2dict(
                     (
                       ('gold', int),
                     )
                 )
                )
    },
    'item': {
        'pk': (match.equalwith('id'), int),
        'name': (match.equalwith('name'), trans.ascii_str('gb18030')),
        'icon': (match.equalwith('icon'), str),
        'stack_num': (match.equalwith('stack_num'), int),
        'food_type': (match.equalwith('food_type'), int),
        'add': (match.startswith('add_'),
                trans.group2dict((
                       ('full', int),
                       ('exp', int),
                       ('ability', trans.delimiter_str(',', int, tuple)),
                       ('value', trans.delimiter_str(',', int, tuple)),
                     ))),
        'use': (match.startswith('use_'),
                trans.group2dict((
                       ('num', trans.iftrueto(int)),
                       ('effect', trans.iftrueto(int)),
                       ('value', trans.iftrueto(int)),
                     ))),
    },
    'equip_merge': special.equip_merge({
        'pk': (match.equalwith('equip_id'), int),
        'destiny_type': (match.equalwith('destiny'), str),
    }),
    'arena_award': special.arena_award({
        'pk': (match.equalwith('id'), int),
        'start_rank': (match.equalwith('start_rank'), int),
        'end_rank': (match.equalwith('end_rank'), int),
        'per': (match.multiin(('per_point', 'per_money')),
                trans.group2dict((
                       ('score', int),
                       ('gold', int),
                     ))),
        'round': (match.multiin(('round_money', 'round_point')),
                  trans.group2dict((
                       ('gold', trans.iftrueto(int)),
                       ('score', trans.iftrueto(int)),
                     ))),
        'round_type': (match.equalwith('round_type1'), trans.iftrueto(int)),
        'value': (match.equalwith('value1'),
                  trans.iftrueto(trans.good_list('\[(\d+),(\d+)\]'))),
        'num': (match.equalwith('num1'), trans.iftrueto(int)),
    }),
    'goblin': {
        'pk': (match.equalwith('level'), int),
        'detail': (match.rematch(r'(basic_exp|need_exp|sell_money|need_money)_type\d'),
                   trans.kind_dict(4, (
                        (0, (('eaten', int), ('need', int), ('sell', int), ('cost', int))),
                        (1, (('eaten', int), ('need', int), ('sell', int), ('cost', int))),
                        (2, (('eaten', int), ('need', int), ('sell', int), ('cost', int))),
                        (3, (('eaten', int), ('need', int), ('sell', int), ('cost', int))),
                        (4, (('eaten', int), ('need', int), ('sell', int), ('cost', int))),
                        (5, (('eaten', int), ('need', int), ('sell', int), ('cost', int))),
                        (6, (('eaten', int), ('need', int), ('sell', int), ('cost', int))),
                        (7, (('eaten', int), ('need', int), ('sell', int), ('cost', int))),
                        (8, (('eaten', int), ('need', int), ('sell', int), ('cost', int))),
                        )))
    },
    'goblins': {
        'pk': (match.equalwith('id'), int),
        'name': (match.equalwith('name'), trans.ascii_str('gb18030')),
        'story': (match.equalwith('description'), trans.ascii_str('gb18030')),
        'image': (match.equalwith('image'), str),
        'star': (match.equalwith('quality'), int),
        'exp_type': (match.equalwith('exp_type'), int),
        'effect_type': (match.equalwith('effect_type'), int),
        'effect_sort': (match.equalwith('effect_sort'), int),
        'value': (match.equalwith('value1'), trans.iftrueto(int, 0)),
        'level_add': (match.equalwith('value_add1'), trans.iftrueto(int, 0)),
    },
    'goblin_get': special.goblin_get({
        'pk': (match.equalwith('level'), int),
        'level': (match.equalwith('level'), int),
        'point': (match.equalwith('point'), int),
        'item': (match.startswith('item_'),
                 trans.filtertrue_list(trans.delimiter_str(',', int, list))),
        'weight': (match.startswith('weight'),
                   trans.filtertrue_list(trans.iftrueto(int, 0))),
    }),
    'goblin_master': {
        'pk': (match.equalwith('level'), int),
        'point': (match.equalwith('master_point'), int),
        'crt': (match.equalwith('master_crt'), int),
        'effect': (match.equalwith('master_effect'), float),
        'luck': (match.equalwith('master_luck'), int),
    },
    'goblin_position': special.goblin_position({
        'pk': (match.equalwith('id'), int),
        'name': (match.equalwith('name'), trans.ascii_str('gb18030')),
        'open_level': (match.equalwith('open_level'), int),
        'open_ku': (match.equalwith('open_ku'), int),
    }),
    'expense': {
        'pk': (match.equalwith('id'), int),
        'cycle': (match.equalwith('round_type'), int),
        'expense': (match.startswith('money_level'), trans.delimiter_list(int)),
    },
    'pet': special.pet({
        'pk': (match.equalwith('lv'), int),
        'detail': (match.rematch(r'quality\d_sen\d'),
                   trans.delimiter_list(trans.iftrueto(int)))
    }),
    'pets': {
        'pk': (match.equalwith('ID'), int),
        'name': (match.equalwith('name'), trans.ascii_str('gb18030')),
        'image': (match.equalwith('image'), str),
        'icon': (match.equalwith('image'), trans.icon('_i')),
        'food_like': (match.equalwith('food_like'), int),
        'food_wary': (match.equalwith('food_wary'), int),
        'talent': (match.equalwith('talent'), trans.iftrueto(int)),
        'star': (match.equalwith('quality'), int),
        'full': (match.equalwith('full'), int),
    },
    'pet_skill': {
        'pk': (match.equalwith('ID'), int),
        'name': (match.equalwith('name'), trans.ascii_str('gb18030')),
        'story': (match.equalwith('story'), trans.ascii_str('gb18030')),
        'star': (match.startswith('quality'), int),
        'sort': (match.equalwith('sort'),
                 trans.delimiter_str(',', int, tuple)),
        'effect_job': (match.equalwith('take_effect_job'),
                       trans.delimiter_str(',', int, tuple)),
        'value1': (match.equalwith('value1'),
                   trans.delimiter_str(',', trans.iftrueto(float), tuple)),
        'value2': (match.equalwith('value2'),
                   trans.delimiter_str(',', trans.iftrueto(float), tuple)),
    },
    'pet_skill_star': special.pet_skill_star({
        'pk': (match.equalwith('ID'), int),
        'star': (match.startswith('quality'), int),
    }),
    'pet_item': {
        'pk': (match.equalwith('lv'), int),
        'detail': (match.rematch(r'quality\d_[AD|AP|DD|DP|HP]'),
                   trans.kind_dict(5, (
                        (1, (('natk', int), ('matk', int),
                             ('ndef', int), ('mdef', int), ('hp', int))),
                        (2, (('natk', int), ('matk', int),
                             ('ndef', int), ('mdef', int), ('hp', int))),
                        (3, (('natk', int), ('matk', int),
                             ('ndef', int), ('mdef', int), ('hp', int))),
                        (4, (('natk', int), ('matk', int),
                             ('ndef', int), ('mdef', int), ('hp', int))),
                        (5, (('natk', int), ('matk', int),
                             ('ndef', int), ('mdef', int), ('hp', int))),
                        (6, (('natk', int), ('matk', int),
                             ('ndef', int), ('mdef', int), ('hp', int))),
                        (7, (('natk', int), ('matk', int),
                             ('ndef', int), ('mdef', int), ('hp', int))),
                        )))
    },
}

